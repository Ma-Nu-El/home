#!/usr/bin/env bash

### HELP

#If no argument, display mini-help.
if [[ -z $1 ]]
then
. ./deployScripts/miniHelp
fi
#
# help page
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]
then
. ./scripts/help
fi

### ACTIONS

if [[ "$1" == "install" ]]
then
cd $HOME

### BACKUP

#.bash_aliases
#if [ -f $HOME/.bash_aliases ]
#then
#echo "Found $HOME/.bash_aliases"
#echo "  Renaming to $HOME/.bash_aliases.pre-deploy"
#mv $HOME/.bash_aliases $HOME/.bash_aliases.pre-deploy
#else
#echo ".bash_aliases not found, installing from github..."
#fi

#.vimrc
#if [ -f $HOME/.vimrc ]
#then
#echo "Found $HOME/.vimrc"
#echo "  Renaming to $HOME/.vimrc"
#mv $HOME/.vimrc $HOME/.vimrc.pre-deploy
#else
#echo ".vimrc not found, installing from github..."
#fi

#.ideavimrc
#if [ -f $HOME/.ideavimrc ]
#then
#echo "Found $HOME/.ideavimrc"
#echo "  Renaming to $HOME/.ideavimrc.pre-deploy"
#mv $HOME/.ideavimrc $HOME/.ideavimrc.pre-deploy
#else
#echo ".ideavimrc not found, installing from github..."
#fi

#.tmux.conf
#if [ -f $HOME/.tmux.conf ]
#then
#echo "Found $HOME/.tmux.conf"
#echo "  Renaming to $HOME/.tmux.conf.pre-deploy"
#mv $HOME/.tmux.conf $HOME/.tmux.conf.pre-deploy
#else
#echo ".tmux.conf not found, installing from github..."
#fi

#.doom.d
#if [ -d $HOME/.doom.d ]
#then
#echo "Found $HOME/.doom.d"
#echo "  Renaming to $HOME/.doom.d.pre-deploy"
#mv $HOME/.doom.d $HOME/.doom.d.pre-deploy
#else
#echo ".doom.d not found, installing from github..."
#fi
#

#.emacs.d
#if [ -d $HOME/.emacs.d ]
#then
#echo "Found $HOME/.emacs.d"
#echo "  Renaming to $HOME/.emacs.d.pre-deploy"
#mv $HOME/.emacs.d $HOME/.emacs.d.pre-deploy
#else
#echo ".emacs.d not found, installing from github..."
#fi

#.emacs.d.bak
#if [ -d $HOME/.emacs.d.bak ]
#then
#echo "Found $HOME/.emacs.d.bak"
#echo "  Renaming to $HOME/.emacs.d.bak.pre-deploy"
#mv $HOME/.emacs.d.bak $HOME/.emacs.d.bak.pre-deploy
#else
#echo ".emacs.d.bak not found, installing from github..."
#fi

#.gitmodules
#if [ -f $HOME/.gitmodules ]
#then
#echo "Found $HOME/.gitmodules"
#echo "  Renaming to $HOME/.gitmodules.pre-deploy"
#mv $HOME/.gitmodules $HOME/.gitmodules.pre-deploy
#else
#echo ".gitmodules not found, installing from github..."
#fi

#.home
#if [ -d $HOME/.home ]
#then
#echo "Found $HOME/.home"
#echo "  Renaming to $HOME/.home.pre-deploy"
#mv $HOME/.home $HOME/.home.pre-deploy
#else
#echo ".home not found, installing from github..."
#fi

cd $HOME/home
git ls-tree --name-only master >> trackedFiles.txt
cd $HOME

EXTENSION=pre-deploy

for FILE in $(cat $HOME/home/trackedFiles.txt); do
	if mv "$HOME/$FILE" "$HOME/$FILE.$EXTENSION"
	then
	echo "dis text"
	else
	:	
	fi
done

### IF BACKUP SUCCESS THEN DEPLOY WORK TREE

echo "Converting ~/home repo into"
echo "~/.home bare repo"
mv $HOME/home/.git $HOME/.home
rm -fr $HOME/home
cd $HOME/.home
git config --bool core.bare true
cd $HOME
echo "Checking out master branch in $HOME"
/usr/bin/git --git-dir=$HOME/.home --work-tree=$HOME \
checkout master .

fi

### REMOVE

if [[ "$1" == "uninstall" ]]
then
cd $HOME
echo "Removing dotfiles and submodules..."
/usr/bin/git --git-dir=$HOME/.home --work-tree=$HOME \
rm -rf .
echo "Creating ~/home directory"
mkdir $HOME/home
mv $HOME/.home $HOME/home/.git
rm -rf $HOME/.home
echo "Converting ~/home/.git into a non-bare git repo"
cd $HOME/home/.git
git config --bool core.bare false
cd $HOME/home
echo "Checking out master branch in $HOME/home"
git checkout master .

echo "Putting backed up files in their original place prior to"
echo "installation of this program."
BACKUP_EXTENSION=pre-deploy
cd $HOME
rename -v "s/\.$BACKUP_EXTENSION$//" *.$BACKUP_EXTENSION
fi
