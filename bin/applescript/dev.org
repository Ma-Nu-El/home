#+title: Dev
#+AUTHOR: MFM
#+DATE: 2025-01-06

* TOC :TOC_1:noexport:
- [[#goal][Goal]]
- [[#current-status][Current status]]
- [[#use-cases][Use cases]]
- [[#requirement][Requirement]]
- [[#current-tools][Current tools]]
- [[#proposed-bash-script-pseudocode][Proposed Bash script pseudocode]]
- [[#chatgpt-bash-script][ChatGPT bash script]]
- [[#prompt][Prompt]]

* Goal

- Continuity in the Capture process (as Capture
  in the GTD scheme) using Emacs's Orgmode via
  a Macbook Pro, an IPhone and the Apple Notes Cloud
  Syncing feature.

* Current status

- Emacs and Orgmode and the entire GTD Scheme is
  somehow implemented in the laptop.
- However, there is a disruption in the capture
  process when capturing to Apple Notes in the iPhone.

* Use cases
:PROPERTIES:
:CREATED:  [2025-01-06 Mon 15:46]
:END:

- Capture content in the Apple Notes App via iPhone,
  and then Process the captured content in the laptop,
  without having to open Notes in the laptop.

* Requirement
- DONE Capture content to iphone Notes app.
- TODO: export captured content from Notes App to
  orgmode format.
  - So it then can be proccesed in Emacs.
- Note: it has been sugested by ChatGPT to use an
  AppleScript.

* Current tools
- This is what I've got so far.
** createNote.scpt

#+begin_src bash :eval no :tangle createNote.scpt
on createNote(noteName, folderName, initialContent)
    tell application "Notes"
        set theFolder to folder folderName
        make new note at theFolder with properties {name:noteName, body:initialContent}
    end tell
end createNote
#+end_src

** deleteNote.scpt

#+begin_src bash :eval no :tangle deleteNote.scpt
on deleteNote(noteName, folderName)
    tell application "Notes"
        set theFolder to folder folderName
        delete (note noteName of theFolder)
    end tell
end deleteNote
#+end_src

** fetchNote.scpt

#+begin_src bash :eval no :tangle fetchNote.scpt
on run {noteName, folderName}
    tell application "Notes"
        set theFolder to folder folderName
        set theNote to note noteName of theFolder
        return body of theNote
    end tell
end run
#+end_src

** saveToFile.scpt

#+begin_src bash :eval no :tangle saveToFile.scpt
on saveToFile(content, outputFilePath)
    -- Escape the content for shell usage
    set escapedContent to do shell script "printf %s " & quoted form of content
    -- Write to the specified file path
    do shell script "echo " & quoted form of escapedContent & " > " & quoted form of outputFilePath
end saveToFile
#+end_src

* Proposed Bash script pseudocode

options accepted
--note-name=NOTE_NAME
--folder-name=FOLDER_NAME
--delete-note=YES|NO
--header=HEADER
# HEADER is the content of the newly created note

calling:
./saveNote.sh \
  --note-name=Refile \ # name of the note to save from
  --folder-name=Notes \ # optional folder name
  --delete-note=NO \ # don't delete the note by default
  --header="Refile" \ #
  --output=YYYY-MM-DD_Day_HHMM_iphone_capture.html

pandoc \
  -o YYYY-MM-DD_Day_HHMM_iphone_capture.org \
  YYYY-MM-DD_Day_HHMM_iphone_capture.html

mv YYYY-MM-DD_Day_HHMM_iphone_capture.org ~/auxRoam/capture_mobile/
* ChatGPT bash script

#+begin_src bash :tangle saveNote.sh :shebang "#!/usr/bin/env bash" :tangle-mode (identity #o755)
set -o pipefail

# Variables
NOTE_NAME="Refile"  # Default note name
FOLDER_NAME="Notes" # Default folder
OUTPUT=""

# Help message function
usage() {
    cat <<EOF
'saveNote' usage:
  General:
    -h, --help, -?            Print this help message.

  Options:
    --note-name=NOTE_NAME     Specify the name of the note to fetch (default: "Refile").
    --folder-name=FOLDER_NAME Specify the folder containing the note (default: "Notes").
    --output=FILE_NAME        Specify the output file name (default: dynamic timestamp-based name).

  Example:
    ./saveNote.sh --note-name="Refile" --folder-name="Notes"
EOF
}

# Parse options
if [[ $1 == '-h' || $1 == '--help' || $1 == '-?' ]]; then
    usage
    exit 0
fi

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --note-name=*) NOTE_NAME="${1#*=}" ;;
        --folder-name=*) FOLDER_NAME="${1#*=}" ;;
        --output=*) OUTPUT="${1#*=}" ;; # Optional: Custom output name
        ,*) echo "Unknown parameter passed: $1"; usage; exit 1 ;;
    esac
    shift
done

# Generate a dynamic timestamp
TIMESTAMP=$(date +"%Y-%m-%d_%a_%H%M")

# Determine the output file name if not provided
if [[ -z "$OUTPUT" ]]; then
    OUTPUT="${TIMESTAMP}_iphone_capture.html"
fi

# Define the Org output file name
ORG_OUTPUT="${OUTPUT%.html}.org"

# Define the capture directory
CAPTURE_DIR=~/auxRoam/capture_mobile

# Ensure the capture directory exists
if [[ ! -d "$CAPTURE_DIR" ]]; then
    echo "Error: Capture directory $CAPTURE_DIR does not exist."
    exit 1
fi

# Fetch the note content
NOTE_CONTENT=$(osascript fetchNote.scpt "$NOTE_NAME" "$FOLDER_NAME")
if [[ -z "$NOTE_CONTENT" ]]; then
    echo "Error: Failed to fetch note content from Notes."
    exit 1
fi

# Save the note content to the output file
echo "$NOTE_CONTENT" > "$OUTPUT"
if [[ ! -f "$OUTPUT" ]]; then
    echo "Error: Failed to save note content to $OUTPUT."
    exit 1
fi
echo "Saved note content to $OUTPUT"

# Convert HTML to Org-mode format using Pandoc
pandoc -o "$ORG_OUTPUT" "$OUTPUT"
if [[ ! -f "$ORG_OUTPUT" ]]; then
    echo "Error: Failed to convert HTML to Org-mode format."
    rm "$OUTPUT" # Clean up the HTML file if conversion fails
    exit 1
fi

# Remove the HTML file after conversion
rm "$OUTPUT"
if [[ -f "$OUTPUT" ]]; then
    echo "Error: Failed to remove intermediate HTML file."
    exit 1
fi
echo "Removed intermediate HTML file: $OUTPUT"

# Move the Org file to the capture directory
mv "$ORG_OUTPUT" "$CAPTURE_DIR/"
if [[ ! -f "$CAPTURE_DIR/$ORG_OUTPUT" ]]; then
    echo "Error: Failed to move Org file to $CAPTURE_DIR."
    exit 1
fi
echo "Moved Org file to $CAPTURE_DIR"

#+end_src

* Prompt

Yeah make the bassh script dynamically create the
timestomp as in

2025-01-06_Mon_1714

Maybe using

: date +"%y-%m...
