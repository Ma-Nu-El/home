#!/usr/bin/env python3
# - [2025-04-28 Mon 11:28]

import subprocess
import os
import sys
import random

VERSION = "v0.3.0"
CHANGELOG = "Added paragraph length control (short, medium, long)"

def usage():
    print(f"""
dummytext {VERSION}
{CHANGELOG}

Usage:
  dummytext [options]

Options:
  -h, --help        Show this help message
  -v, --version     Show version information

Examples:
  dummytext
  dummytext --help
  dummytext --version
""")
    sys.exit(0)

def version():
    print(f"{VERSION} - {CHANGELOG}")
    sys.exit(0)

def copy_to_clipboard(text):
    """Use user's own copy_to_clipboard script."""
    script_path = os.path.expanduser("~/bin/copy_to_clipboard")
    if os.path.isfile(script_path) and os.access(script_path, os.X_OK):
        subprocess.run([script_path], input=text.encode())
        return True
    else:
        return False

def ask_choice(question, options, allow_multiple=False):
    print(question)
    for idx, opt in enumerate(options, 1):
        print(f"{idx}. {opt}")
    choice = input("Enter number(s) (comma separated if multiple): ").strip()
    if allow_multiple:
        return [options[int(c.strip())-1] for c in choice.split(',') if c.strip().isdigit()]
    else:
        return options[int(choice)-1]

def main():
    # Handle CLI flags only
    args = sys.argv[1:]
    while args:
        arg = args.pop(0)
        if arg in ("-h", "--help"):
            usage()
        elif arg in ("-v", "--version"):
            version()
        else:
            print(f"Unknown argument: {arg}")
            usage()

    # === Interactive Mode ===
    print("Welcome to DummyText Generator!\n")

    # Step 1: Ask Org or LaTeX
    format_output = ask_choice(
        "Which output format?",
        ["Org Mode", "LaTeX"]
    )
    format_output = "org" if "Org" in format_output else "latex"

    # Step 2: Ask simple vs flexible
    simple_or_flexible = ask_choice(
        "Do you want simple dummy text or flexible structures?",
        ["Simple (lipsum)", "Flexible (blindtext)"]
    )

    package = "lipsum" if "Simple" in simple_or_flexible else "blindtext"

    # Step 3: Ask structures
    structures = []
    if package == "lipsum":
        structures.append("paragraphs")
    else:
        structures = ask_choice(
            "Which structures do you want to generate?",
            ["words", "paragraphs", "itemized list", "table", "full document"],
            allow_multiple=True
        )

    # Step 4: Ask randomize or not
    randomize_order = input("Randomize structure order? (y/N): ").lower().startswith('y')

    # Step 5: How many of each
    counts = {}
    for struct in structures:
        count = input(f"How many {struct}? (default 1): ").strip()
        counts[struct] = int(count) if count.isdigit() else 1

    if randomize_order:
        random.shuffle(structures)

    # Step 6: If paragraphs selected, ask paragraph length style
    para_length_style = None
    if "paragraphs" in structures:
        para_length_style = ask_choice(
            "Choose paragraph length style:",
            ["Short (20–50 words)", "Medium (100–200 words)", "Long (300–500 words)"]
        )

    # === Output generation ===
    header = ""
    if format_output == "org":
        header += f"#+LATEX_HEADER: \\usepackage{{{package}}}\n\n"
    else:
        header += "\\documentclass{article}\n"
        header += f"\\usepackage{{{package}}}\n\n"
        header += "\\begin{document}\n\n"

    body = ""

    def random_wordcount(style):
        if style.startswith("Short"):
            return random.randint(20, 50)
        elif style.startswith("Medium"):
            return random.randint(100, 200)
        elif style.startswith("Long"):
            return random.randint(300, 500)
        else:
            return 50

    for struct in structures:
        if struct == "paragraphs":
            for _ in range(counts[struct]):
                if package == "lipsum":
                    body += "% lipsum paragraph\n" if format_output == "latex" else "# lipsum paragraph\n"
                    body += "\\lipsum[1]\n\n"
                else:
                    wordcount = random_wordcount(para_length_style)
                    body += "% blindtext paragraph\n" if format_output == "latex" else "# blindtext paragraph\n"
                    body += f"\\Blindtext[1][{wordcount}]\n\n"
        elif struct == "words":
            for _ in range(counts[struct]):
                body += "% blindtext words\n" if format_output == "latex" else "# blindtext words\n"
                body += "\\Blindtext[1][1]\n\n"
        elif struct == "itemized list":
            for _ in range(counts[struct]):
                body += "% blindtext itemized list\n" if format_output == "latex" else "# blindtext itemized list\n"
                body += "\\Blinditemize\n\n"
        elif struct == "table":
            for _ in range(counts[struct]):
                body += "% blindtext table\n" if format_output == "latex" else "# blindtext table\n"
                body += "\\Blindtable\n\n"
        elif struct == "full document":
            body += "% blindtext full document\n" if format_output == "latex" else "# blindtext full document\n"
            body += "\\Blinddocument\n\n"

    footer = ""
    if format_output == "latex":
        footer += "\\end{document}\n"

    # Final output
    final_output = header + body + footer
    print(final_output)

    # === Ask to copy to clipboard ===
    copy_choice = input("\nCopy output to clipboard? (y/N): ").lower().startswith('y')
    if copy_choice:
        success = copy_to_clipboard(final_output)
        if success:
            print("✅ Output copied to clipboard!")
        else:
            print("⚠️  Copy-to-clipboard script not found or not executable at ~/bin/copy_to_clipboard.")


if __name__ == "__main__":
    main()

