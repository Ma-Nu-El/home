#+TITLE: Config File
#+PROPERTY: header-args :tangle ~/.doom.d/config.el :results silent
#+bibliography: "~/FilenSync/org/bibliography.bib"
#+cite_export: basic

* Table of Contents :TOC_2:noexport:
- [[#shebang][shebang]]
- [[#user-full-name][user-full-name]]
- [[#mu4e][mu4e]]
  - [[#standard-config][standard config]]
  - [[#after-standard-config][after standard config]]
- [[#font][font]]
- [[#theme][theme]]
- [[#org-directory][org directory]]
- [[#recursive-agenda-files][recursive agenda files]]
- [[#no-line-numbers][no line numbers]]
- [[#horizontal-scroll-with-mouse-wheel][horizontal scroll with mouse wheel]]
- [[#begin-org-section][begin org section]]
  - [[#export-org-backend-enabling][export org backend enabling]]
  - [[#fixed-flush-left-indentation][fixed flush left indentation]]
  - [[#effort_all-org-global-properties][~Effort_ALL~: ~org-global-properties~]]
  - [[#org-column-view-format][~org-column~ view format]]
  - [[#logbook-and-clockbook][~LOGBOOK~ and ~CLOCKBOOK~]]
  - [[#org-agenda-default-settings][~org-agenda~ default settings]]
  - [[#org-agenda-custom-commands][~org-agenda-custom-commands~]]
  - [[#org-habit][~org-habit~]]
  - [[#todo-keywords][~TODO~ keywords]]
  - [[#org-log-done-insert-closed-when-done][~org-log-done~: insert ~CLOSED~ when ~DONE~]]
  - [[#org-latex-classes][~org-latex-classes~]]
  - [[#latex-export-table-of-contents-settings][latex export table of contents settings]]
  - [[#latex-other-languages][latex other languages]]
  - [[#org-babel-python-command][~org-babel-python-command~]]
  - [[#mu4e-store-links][mu4e store links]]
  - [[#how-many-todos-left-info-in-heading][how many todos left info in heading]]
  - [[#recursive-todo-cookie-statistics][recursive ~TODO~ cookie statistics]]
  - [[#use-org-id-to-store-links-when-appropriate][use ~org-id~ to store links when appropriate]]
  - [[#org-file-apps-open-links-with-default-application][~org-file-apps~: open links with default application]]
  - [[#org-clock][~org-clock~]]
  - [[#org-export-exclude-tags][~org-export-exclude-tags~]]
  - [[#disable-crypt-tag-inheritance][disable "crypt" tag inheritance]]
  - [[#org-transclusion][~org-transclusion~]]
  - [[#org-depend][~org-depend~]]
  - [[#org-roam][~org-roam~]]
  - [[#org-roam-bibtex][~org-roam-bibtex~]]
  - [[#org-capture][~org-capture~]]
  - [[#org-ref][~org-ref~]]
  - [[#org-glossary][~org-glossary~]]
  - [[#org-cite][~org-cite~]]
  - [[#underscore-and-hat-handling][underscore and hat handling]]
  - [[#org-tag-alist][~org-tag-alist~]]
  - [[#created-property][=CREATED= property]]
  - [[#org-priority-highestdefaultlowest][~org-priority-[highest|default|lowest]~]]
  - [[#myorg-archive-done-tasks][~my/org-archive-done-tasks~]]
  - [[#myorg-agenda-custom-search-next-action-and-myorg-convert-to-next-action][~my/org-agenda-custom-search-next-action~ and ~my/org-convert-to-next-action~]]
  - [[#load-tags-file][load tags file]]
  - [[#cnld-log][CNLD log]]
  - [[#cnld-org-fontify-quote-and-verse-blocks-disabled][CNLD org fontify quote and verse blocks [DISABLED]]]
  - [[#cnld-disable-heading-numbering-during-export][CNLD disable heading numbering during export]]
  - [[#cnld-prevent-invisible-edits-commented-out][CNLD prevent invisible edits [Commented out]]]
- [[#end-org-section][end org section]]
- [[#flyspell-mode-t][flyspell-mode t]]
- [[#ispell-config][ispell config]]
- [[#personal-keybindings][personal keybindings]]
- [[#start-week-on-monday][start week on monday]]
- [[#dailies][dailies]]
- [[#treemacs][treemacs]]
- [[#disable-backup][disable backup]]
- [[#custom-set-faces][custom set faces]]
- [[#custom-set-variables][custom set variables]]
- [[#60-char-ruler][60 char ruler]]
- [[#git-gutter][git gutter]]
- [[#org-ai][~org-ai~]]
- [[#fix-zo-not-working-in-macos][fix =zo= not working in macOS]]
- [[#orgmode-readonly-custom-functions][orgmode readonly custom functions]]
- [[#keyboard-shortcuts][keyboard shortcuts]]

* shebang
:PROPERTIES:
:header-args: :results silent :tangle ~/.doom.d/config.el
:ID:       741425b4-8f1d-44c0-9245-7fe9a5c62e12
:END:

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.

* user-full-name
:PROPERTIES:
:ID:       c1cc08a8-95ed-4bb6-a523-41fb398a2dd9
:END:
#+begin_src elisp
(setq user-full-name "Manuel Fuica Morales"
      ;; user-mail-address "m.fuica01@ufromail.cl"
      )
#+end_src

#+RESULTS:
: Manuel Fuica Morales

;; (setq smtpmail-smtp-server "smtp.gmail.com")
;; (setq smtpmail-smtp-service 587) ;; this might need to change


;; https://stackoverflow.com/questions/17281669/using-smtp-gmail-and-starttls
;; https://emacs.stackexchange.com/questions/46257/sending-email-fails-with-process-smtpmail-not-running

* mu4e
** standard config
:PROPERTIES:
:ID:       53c3636b-214b-43e4-967b-e8af4a806c45
:END:

#+begin_src elisp
(setq mu4e-maildir "~/Maildir")
(setq mu4e-attachment-dir (expand-file-name "~/myDrive/mailAttachments"))
#+end_src

;; Details for mu4e-attachement-dir configuration:
;; https://github.com/hlissner/doom-emacs/issues/3294

;; https://gist.github.com/areina/3879626

#+begin_src elisp
(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials
      '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      (expand-file-name "~/.authinfo.gpg")
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info t
      ;; auth-sources '(password-store)
      auth-source-debug t
      )
#+end_src

** after standard config :crypt:
:PROPERTIES:
:ID:       1ee20f94-c54e-4597-9a06-d3b32ecd1b32
:END:

-----BEGIN PGP MESSAGE-----

jA0ECQMC3MG0U+DW6sD/0ukBLNhXmPMl96VRjoOoDHZVLB1Tg7ox5eUbt2GLVVsx
cBhR56uJe0NsNVvGS8gZh/kG9N21jNVJHf8fNIsQM4Vf48RqK6o8XbWwLPh47+k7
tLu7iRPjZnp985qpxF0KVMIVrOUIVPtWT8wxHSLLPh5/0tE5o1E7qeteKF2VMDgW
OvWJLLY/ANeAx/Q6ECJJ+HmwZQrJiIzxqrsYf6hJ8W+Sqzo2xgafsF7qXVG7QoEV
QZ0s2+D9lRd8/7tmaBUpusfHcp5KbAAaRnFwAqpv04/RRDjcAAHXmL5ZS/VUk4Hw
i24m28RLVpiMq73ibBs0A9vXlmr1emOppbLTG+MMRpIgwK6akn9hWhX42s+swMfu
dpXEwEDXsaua41XZe7+SOa0SxaEL7eQfdawq/iX4Ej5i6vO7CD/lWFZ/R6EjiYCQ
XShHdMxgiwp1meGu/JlTbPNfjY9H/pxbLbnFWjmoTrzGrcJ6HP2bAl9dwbejRPow
vBfoPGFUW+Ma5MTvUE7ZBd79fxFqFw2s2hK+gV/3/pijuXqdlvfAfr8cD/AwwWkU
9//kQjv8v++AyC9lO6w9iaMmp38vWu5NDrcnXfhAX9dRDdxhXHBWgdf7bwqtn8D8
t9yibjiPj6BVogXmXPESp5ux2Zt1+p2v7KL1ymeCDWLl82QVDpn3pWEndKUoutQn
rhL7T1r4kXZ6NC4iFR56ROMPLzA=
=2AAL
-----END PGP MESSAGE-----

* font
:PROPERTIES:
:ID:       3d09ad0f-b02f-419e-a6a4-5a137258ef5f
:END:

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
doom-variable-pitch-font (font-spec :family "sans" :size 13))

* theme
:PROPERTIES:
:ID:       1f7b461e-9dcb-4f4b-b9b4-d3fbf8857903
:END:
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
#+end_src
- Check the different themes
  + https://github.com/hlissner/emacs-doom-themes/tree/screenshots

* org directory
:PROPERTIES:
:ID:       86d962a4-8100-483a-a739-59cfcdfb0655
:END:

If you use `org' and don't want your org files in
the default location below, change `org-directory'.
It must be set before org loads!

#+begin_src elisp
(setq org-directory "~/FilenSync/org/")
#+end_src

;; Added by me
;; https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically

* recursive agenda files
:PROPERTIES:
:ID:       7e605bae-b5f5-41ad-b95e-c02f621b7926
:END:

(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))


#+begin_src elisp
(setq org-agenda-files "~/.doom.d/agenda-files.txt")
#+end_src

- https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
- https://orgmode.org/manual/Agenda-Files.html

(setq org-agenda-files (list "~/org/auxRoam/.org"
                             "~/org/school.org"
                             "~/org/home.org"))

* no line numbers
:PROPERTIES:
:ID:       23918f8e-2350-40a7-b4d8-57520c5a36cf
:END:
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to ='relative=.

# (setq display-line-numbers-type 'relative)
#+begin_src elisp
(setq display-line-numbers-type nil)
#+end_src

https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#why-is-emacsdoom-slow

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* horizontal scroll with mouse wheel
# - [2023-08-30 Wed 13:05]

#+begin_src elisp
(setq mouse-wheel-tilt-scroll t)
#+end_src

* begin org section
:PROPERTIES:
:ID:       72258b79-1e04-4a73-95b8-515f48143e5d
:END:
#+begin_src elisp
;; BEGIN AFTER ORG
(after! org
#+end_src

** export org backend enabling
:PROPERTIES:
:ID:       a794b757-4dcb-4a6b-a515-89e4419b5f19
:END:
#+begin_src elisp
(add-to-list 'org-export-backends 'org)
#+end_src

** fixed flush left indentation
:PROPERTIES:
:ID:       27de66e8-d440-4a80-bab7-843bebf87b8b
:END:
#+begin_src elisp
(setq org-adapt-indentation nil)
#+end_src

More consistent; if I change heading level I don't have
to fix line breaks due to later changes in heading
level. CLI 80 chars FTW.

*** other settings
:PROPERTIES:
:ID:       a4d196f2-9fc3-44ab-97a5-fb2130c5d167
:END:
#+begin_src elisp
(setq org-fontify-quote-and-verse-blocks nil
      org-fontify-whole-heading-line nil
      org-hide-leading-stars nil
      org-startup-indented nil
      )
#+end_src

- https://emacs.stackexchange.com/questions/9709/keep-the-headlines-expanded-in-org-mode

*** start folded nil
:PROPERTIES:
:ID:       964fd048-37ad-4bff-a09e-dbf48ab72124
:END:
It's gotta be faster. Useful too when you have a TOC heading first.

#+begin_src elisp
(setq org-startup-folded nil)
#+end_src

** ~Effort_ALL~: ~org-global-properties~
:PROPERTIES:
:ID:       64ea25a8-c5a6-4d48-a199-3d5162305169
:END:
#+begin_src elisp
;; https://github.com/pokeefe/Settings/blob/master/emacs-settings/.emacs.d/modules/init-org.el
;; Effort and global properties
(setq org-global-properties '(
                              ("Effort_ALL" .
                               "0 0:01 0:03 0:05 0:10 0:15 0:20 0:30 0:45 1:00 1:30 2:00 2:30 3:00 3:30 4:00 4:30 5:00 5:30 6:00 6:30 7:00 7:30 8:00")
                              )
      )
#+end_src

** ~org-column~ view format
:PROPERTIES:
:ID:       82451b12-f96d-40b5-9b2a-2908eee6eff4
:END:

Set global Column View format.

#+begin_src elisp
(setq org-columns-default-format '"%60ITEM(Item) %5Effort(Estim){:} %5CLOCKSUM(Curr)")
#+end_src

(setq org-columns-default-format '"%34ITEM(Item) %10TAGS(Tags) %5TODO(State)
 %5Effort(Estim){:} %10CLOCKSUM(Actual)")

** ~LOGBOOK~ and ~CLOCKBOOK~
:PROPERTIES:
:ID:       a065fc59-7ecf-4c1a-aa3c-d01f7f36eb28
:END:
- https://stackoverflow.com/questions/24686129/how-can-i-make-org-mode-store-state-changes-for-a-repeating-task-in-a-drawer

#+begin_src elisp
(setq org-log-into-drawer "LOGBOOK")
(setq org-clock-into-drawer "CLOCKBOOK")
#+end_src

** ~org-agenda~ default settings

#+begin_src elisp
(setq org-agenda-span 3)
(setq org-agenda-start-day "-0d") ; start on current day,
                                        ; useful when exporting html 28-day version.
(setq org-agenda-start-on-weekday nil)
#+end_src
- [[https://emacs.stackexchange.com/questions/12517/how-do-i-make-the-timespan-shown-by-org-agenda-start-yesterday][org mode - How do I make the timespan shown by org agenda start yesterday? - Emacs Stack Exchange]]

Hide filename in agenda view
#+begin_src elisp
(setq org-agenda-prefix-format "%t %s")
#+end_src
- https://lists.gnu.org/archive/html/emacs-orgmode/2010-01/msg00744.html


Disable "now" line in org agenda view.
That line is counterintuitive sometimes
when checking agenda remotely.

#+begin_src elisp
(setq org-agenda-show-current-time-in-grid nil)
(setq org-agenda-hide-tags-regexp ".")
(setq org-agenda-use-time-grid nil)
#+end_src
- https://orgmode.org/manual/Agenda-Commands.html

** ~org-agenda-custom-commands~
:PROPERTIES:
:ID:       e4bd5984-7063-44f3-973d-51c298645761
:END:


#+begin_src elisp
(setq org-agenda-custom-commands
      '(
        ;; ( "1" "Next 28 days."
        ;;   ((agenda ""))
        ;;   ;; ((org-agenda-tag-filter-preset '("-habit")))
          ;; ("~/agenda-today.html") ;; enables html export of this agenda view
        ;;   ((org-agenda-span 28))
        ;;   ((org-agenda-start-day "-0d"))
        ;;   )
        ("1" "Next 28 days" agenda ""
         ((org-agenda-span 28)
          (org-agenda-start-day "-0d")
          (org-agenda-remove-tags t)
         )
         ("~/test.pdf"))
        ;; ( "2" "Last and next 3 days."
        ;;   ;; Made to be exported to html
        ;;   ((agenda ""))
        ;;            ((org-agenda-span 7))
        ;;            ((org-agenda-start-day "-2"))
        ;;   )
        ;; ( "8" "Next 8 days, don't show today."
        ;;   ;; Made to be exported to html
        ;;   ((agenda ""))
        ;;            ((org-agenda-span 8))
        ;;            ((org-agenda-start-day "+1d"))
        ;;   )
        ;; ( "4" "Next 14 days, don't show today."
        ;;   ;; Made to be exported to html
        ;;   ((agenda ""))
        ;;            ((org-agenda-span 14))
        ;;            ((org-agenda-start-day "+1d"))
        ;;   )
        ;; ( "0" "Next 28 days, don't show today."
        ;;   ;; Made to be exported to html
        ;;   ((agenda ""))
        ;;            ((org-agenda-span 28))
        ;;            ((org-agenda-start-day "+1d"))
        ;;   )
        ( "H" "Only 'habit' tag"
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+habit"))))
        ( "h" "Exclude 'habit' tag"
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("-habit"))))
        ;; ( "n" "Only 'today' tag."
        ;;   ((agenda ""))
        ;;   ((org-agenda-tag-filter-preset '("+today"))))
        ( "O" "Only 'oneoff' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+oneoff"))))
        ( "R" "Only 'recurring' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+recurring"))))
        ( "u" "Exclude 'university' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("-university"))))
        ( "U" "Only 'university' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+university"))))
        ( "l" "All 'university' except 'lecture' and 'assistantship'."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+university" "-lecture" "-assistantship"))))
        ( "L" "Only lectures and assistantships."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+lecture" "+assistantship"))))
        ( "c" "Only 'contacts' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+contacts"))))
        ( "b" "Only 'birthday' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+birthday"))))
        ( "k" "Exclude 'music' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("-music"))))
        ( "K" "Only 'music' tag."
          ((agenda ""))
          ((org-agenda-tag-filter-preset '("+music"))))
        )
      )
#+end_src

- https://emacs.stackexchange.com/questions/38183/how-to-exclude-a-file-from-agenda

** ~org-habit~
:PROPERTIES:
:ID:       c6e2c52f-51bd-4fd9-8fd5-080fb2a617be
:END:
#+begin_src elisp
(add-to-list 'org-modules 'org-habit)
#+end_src
- https://github.com/hlissner/doom-emacs/issues/3102


#+begin_src elisp
(setq org-habit-preceding-days 21)
(setq org-habit-following-days 7)
#+end_src

- https://orgmode.org/manual/Tracking-your-habits.html

** ~TODO~ keywords
:PROPERTIES:
:ID:       55c05291-82b3-443f-93ee-68a68b38d3de
:END:

#+begin_src elisp
(setq org-todo-keywords
      '((sequence
         "WAIT(w@)"
         "NEXT(n!)"
         ;; "DOIN(d!)"
         "TODO(t!)"
         "PROJ(p!)"
         "INCU(i!)"
         "|"
         "DONE(D@)"
         "CNLD(C@)" )
        )
      )
#+end_src

- TRACK TODO STATE CHANGES
- https://orgmode.org/manual/Tracking-TODO-state-changes.html
- OrgMode E03S01: Automatic logging of status changes:
  + https://www.youtube.com/watch?v=R4QSTDco_w8

** ~org-log-done~: insert ~CLOSED~ when ~DONE~
:PROPERTIES:
:CREATED:  [2024-09-30 Mon 00:21]
:END:

#+begin_src elisp
(setq org-log-done 'note)
#+end_src

** ~org-latex-classes~

- [[https://ctan.org/tex-archive/macros/latex/contrib/extsizes][CTAN: /tex-archive/macros/latex/contrib/extsizes]]
- [[https://emacs.stackexchange.com/questions/29726/org-mode-different-latex-document-class][org export - org-mode different latex document class - Emacs Stack Exchange]]
- [[https://github.com/djnavarro/rbook/issues/41][Any clue how to source it with 12pt font size? · Issue #41 · djnavarro/rbook · GitHub]]
- [[https://superuser.com/questions/896741/how-do-i-configure-org-latex-classes-in-emacs][How do I Configure 'org-latex-classes in .emacs? - Super User]]
- [[https://lists.gnu.org/archive/html/emacs-orgmode/2012-10/msg00435.html][Re: [O] #+LATEX_CLASS: IEEEtran]]


: \documentclass[letter,twoside,14pt,openright]{extbook}

(require 'ox-latex)
#+begin_src elisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("extbook"
               "\\documentclass{extbook}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("extarticle"
               "\\documentclass{extarticle}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("extreport"
               "\\documentclass{extreport}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("IEEEtran"
               "\\documentclass{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
#+end_src

** latex export table of contents settings
:PROPERTIES:
:ID:       994f0f4d-3184-445a-b079-2a1c894dbcaf
:END:
Orgmode latex export: new page after TOC
- https://emacs.stackexchange.com/questions/42558/org-mode-export-force-page-break-after-toc

# #+begin_src elisp
# (setq org-latex-toc-command "\\tableofcontents \\clearpage")
# #+end_src

** latex utf8x instead of utf8 :noexport:
:PROPERTIES:
:ID:       748118f7-db21-46af-b1c1-628faa6f3a49
:END:
# noexport tag since it does not solve the original problem:
# [[id:9448d2f9-a00f-458b-b608-bca78e151138][how to print small greek epsilon in pdf orgmode export? (ε)]]

- https://emacs.stackexchange.com/questions/20062/exporting-unicode-characters-to-pdf-using-latex-from-org-mode


Seems like the default is =utf8=, and that is a problem when you want to
write something weird like _/ε/_ for authors/ in =pdf= export;
the =html= export has not presented this problem so far.

# #+begin_src elisp
# (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
# #+end_src

** latex other languages
:PROPERTIES:
:CREATED:  [2021-10-28 Thu 00:11]
:END:
- =HTML= exports works fine, but when exporting to
  =PDF=, =#+LANGUAGE: <yourLang>= is not enough.


This seems to do the job.

#+begin_center
This one does not work.
#+end_center

: #+begin_example elisp
: (add-to-list 'org-latex-packages-alist '("AUTO" "babel" t ("pdflatex")))
: #+end_example
- https://www.reddit.com/r/orgmode/comments/f5unzb/export_setting_language_does_not_work/


An alternative not tested solution is to put this in your file.

#+begin_center
This one works!
#+end_center

: #+LANGUAGE: es
: #+LATEX_HEADER: \usepackage[spanish]{babel}

Almost the same except for the extra =#+LATEX_HEADER= part.


See also:
- https://emacs.stackexchange.com/questions/21239/change-table-of-contents-title-in-org-mode-according-to-document-language

** ~org-babel-python-command~
:PROPERTIES:
:CREATED:   [2024-03-28 Thu 11:26]
:END:

- https://emacs.stackexchange.com/questions/57447/org-babel-loads-different-python


#+begin_src elisp
(setq org-babel-python-command "~/venv/python3.12.2/bin/python")
#+end_src

** mu4e store links
But when enabling this, it overrides the other org-store-link* protocols.
Have to enable, compile and restart emacs when wanting to use, and disable
compile and restart emacs when wanting to store links from anywhere else.

At least the links are still useful when the mechanism is disabled, but have
to do something about it.
##+begin_src elisp

;; [2021-05-03 Mon]
;; By default, doom emacs wont store email links in mu4e headers view
;; have to enable org-mu4e
;; (require 'org-mu4e) ; interferes with the rest of org-links

;; MORE ABOUT ORG MODE
;; https://orgmode.org/manual/Breaking-Down-Tasks.html#Breaking-Down-Tasks
##+end_src

** how many todos left info in heading
:PROPERTIES:
:ID:       485fa339-fde6-47bb-9873-59bf7e3d5ded
:END:

Disabled because causes issues. Not investigated.

#+begin_example elisp
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_example

also, you have to set the cookie property to 'todo
recursive'; you can use Doom's 'SPC m o'. Still, it's
too much work. Have to do something about it.

** recursive ~TODO~ cookie statistics
:PROPERTIES:
:CREATED:  [2023-05-18 Thu 11:20]
:END:
- [cite:@org_recursive_todo_statistics]

#+begin_src elisp
(setq org-hierarchical-todo-statistics nil)
#+end_src

: (setq org-hierarchical-todo-statistics 'recursive)
: (setq org-hierarchical-todo-statistics '(recursive))
: (setq org-hierarchical-todo-statistics "recursive")
: (setq org-hierarchical-todo-statistics '("recursive"))

** use ~org-id~ to store links when appropriate
:PROPERTIES:
:ID:       7a291636-2179-4180-8d53-1614e7074454
:END:

#+begin_src elisp
(setq org-id-link-to-org-use-id t)
#+end_src

** ~org-file-apps~: open links with default application
:PROPERTIES:
:ID:       c9e0a789-0d20-4dfa-b457-ff5a9ed27698
:END:

#+begin_src elisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . default)
        ("\\.jpg\\'" . default)
        ("\\.png\\'" . default)
        ("\\.svg\\'" . default)
        ("\\.pptx\\'" . default)
        ("\\.tar.xz\\'" . default) ;; for org-mode extensions
        ;; Libreoffice (ODF) extensions
        ("\\.odt\\'" . default) ;; text
        ("\\.ods\\'" . default) ;; spreadsheet
        ("\\.odp\\'" . default) ;; presentation
        ("\\.odg\\'" . default) ;; graphics
        )
      )
#+end_src
- https://stackoverflow.com/questions/3973896/emacs-org-mode-file-viewer-associations
- https://emacs.stackexchange.com/questions/2856/how-to-configure-org-mode-to-respect-system-specific-default-applications-for-ex

** ~org-clock~
:PROPERTIES:
:ID:       21d12421-59e2-484c-ace5-95dfc13b67dd
:END:
Persistent org clock.

#+begin_src elisp
(setq org-clock-persist 'history)
(setq org-clock-persist-file "~/.doom.d/.org-clock-save.el")
(setq org-clock-persistence-insinuate t)
(setq org-clock-auto-clock-resolution nil)
#+end_src

Also check this at:
- https://github.com/pokeefe/Settings/blob/master/emacs-settings/.emacs.d/modules/init-org.el
  - (setq org-clock-persist-file (concat user-emacs-directory "persistence/org-clock-save.el"))

https://orgmode.org/manual/Clocking-Work-Time.html

** ~org-export-exclude-tags~
:PROPERTIES:
:ID:       54b7e29a-55da-4baf-b0a5-10848d35130e
:CREATED:  [2021-05-30 Sun 11:20]
:END:


#+begin_src elisp
(setq org-export-exclude-tags '("noexport"))
#+end_src

That way you don't have to put
#+begin_example elisp
#+EXCLUDE_TAGS: noexport
#+end_example
in every file's initial properties.

Very useful combined with a first heading containing a table of contents.

#+begin_example elisp
# * Table of Contents :TOC_4:noexport:
#+end_example

That table of contents combined with start [[id:964fd048-37ad-4bff-a09e-dbf48ab72124][unfolded]], the first thing
you see when opening a buffer will be a local and always updated table
of contents that also [[https://orgmode.org/manual/Export-Settings.html][won't be exported]]
(Check the =EXCLUDE_TAGS= section)
so it doesn't conflict with other
exports like html, latex or markup.

Neat thing indeed.

** disable "crypt" tag inheritance
:PROPERTIES:
:ID:       68153510-2ca9-4d16-ae50-6e916da8142d
:END:
- https://orgmode.org/manual/Org-Crypt.html

#+begin_src elisp
(setq org-tags-exclude-from-inheritance '("crypt"))
#+end_src

** ~org-transclusion~
:PROPERTIES:
:ID:       0d747be6-fc5d-4270-bf63-123fd81cd6c2
:CREATED:  [2021-06-02 Wed]
:END:
- Useful for Doom Emacs users.

In your ~~/.doom.d/package.el~ add the following
#+begin_example elisp
(package! org-transclusion
  :recipe (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el")))
#+end_example

And in your ~~/.doom.d/config.el~ file add
#+begin_src elisp
(use-package! org-transclusion)
#+end_src

Notice
- In your ~package.el~ file the statement starts with ~package!~ while
  in the ~config.el~ it starts with ~use-package!~.
- In your ~config.el~ file
  #+begin_example elisp
  (use-package! org-transclusion)
  #+end_example
  has to be placed _inside_ the ~(after! org)~ section like this:
  #+begin_example elisp
  (after! org
  your org config...
  (use-package! org-transclusion)
  )
  #+end_example
  - Don't have source but I remember reading it in the Doom Emacs's manual.


Details here:
- https://github.com/nobiot/org-transclusion/issues/28
- https://github.com/nobiot/org-transclusion/issues/79
- https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org
  - See the section about configuring packages.

- Examples:
  + See my ~~/.doom.d/config.org~ and ~~/.doom.d/packages.org~ files and
    search for =transclusion=. You can find them in my dotfiles.
    - https://github.com/Ma-Nu-El/home/tree/master/.doom.d


The core point of transclusion is probably not the
syncronization of info across files, but the live sync
and the saved space in storage. For static sync you
could use the #+INCLUDE keyword. In fact I use it for
university stuff. Check ~/org/uni/docs/index.html

** ~org-depend~

#+begin_src elisp
(require 'org-depend)
#+end_src

** ~org-roam~
:PROPERTIES:
  :ID:       41e53852-03b8-4098-a190-287a30504cfc
  :END:
#+begin_src elisp
;; ORG-ROAM
(setq org-roam-directory "~/auxRoam")
#+end_src
(setq org-roam-directory "~/auxRoam")
(require 'org-roam-protocol)
;; (add-hook 'after-init-hook 'org-roam-mode)
- No longer required in org-roam-v2
  - https://github.com/magit/magit/issues/3741
- [2022-10-03 Mon 21:49]
- Disabled all =org-roam= functionality as
  I updated to =roam= version 2 and some things
  broke and don't have time to fix them.

** ~org-roam-bibtex~
:PROPERTIES:
:CREATED:  [2022-10-06 Thu 22:11]
:END:

,#+begin_src elisp
;; (use-package! org-roam-bibtex
;;   :after org-roam
;;   :config
;;   (require 'org-ref))
,#+end_src

** ~org-capture~
:PROPERTIES:
:CREATED:  [2023-02-19 Sun 23:52]
:END:
- [[https://orgmode.org/manual/Capture.html][Capture (The Org Manual)]]
- [[https://howardism.org/Technical/Emacs/capturing-intro.html][Org Capturing Introduction]]
- [[https://takeonrules.com/2022/09/06/org-mode-capture-templates-and-time-tracking/][Org Mode Capture Templates and Time Tracking // Take on Rules]]
- [[https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/][Share your Org Capture Templates! : emacs]]


#+begin_src elisp
(setq org-default-notes-file (concat org-directory "default_notes.org"))
#+end_src

: (setq org-capture-templates
:       '(("t" "Task Entry" entry
:          (file org-default-inbox-file)
:          "* %?\n:PROPERTIES:\n:CREATED:%U\n:END:\n%i\n"
:          :kill-buffer t)
:        ))


- [[https://orgmode.org/manual/Template-expansion.html][Template expansion (The Org Manual)]]


- [2024-04-10 Wed] This one inserts timestamps


#+begin_src elisp :tangle no
(setq org-capture-templates
     '(
      ("w" "Work" entry (file "~/FilenSync/org/refile.org")
         "* %u %?\n# - %U\n\n" :clock-in nil)
      ("W" "Work Citation" entry (file "~/FilenSync/org/bibliography.org")
         "* %u\n# - %U\n\n#+begin_src latex\n%?\n#+end_src" :clock-in nil)
      ("p" "Personal" entry (file "~/auxRoam/refile.org")
         "* %u %?\n# - %U\n\n" :clock-in nil)
      ("P" "Personal Citation" entry (file "~/auxRoam/bibliography.org")
         "* %u\n# - %U\n\n#+begin_src latex\n%?\n#+end_src" :clock-in nil)
))
#+end_src


- [2024-04-10 Wed] Now, since using
  =org-set-created-property= custom function
  ([[https://emacs.stackexchange.com/questions/21291/add-created-timestamp-to-logbook][org mode - Add "created" timestamp to LOGBOOK - Emacs Stack Exchange]]),
  I'm disabling the inactive timestamp in the
  line below heading.

#+begin_src elisp
(setq org-capture-templates
     '(
      ("w" "Work" entry (file "~/FilenSync/org/refile.org")
         "* %u %?\n\n" :clock-in nil)
      ("W" "Work Citation" entry (file "~/FilenSync/org/bibliography.org")
         "* %u %?\n\n#+begin_src latex\n%?\n#+end_src" :clock-in nil)
      ("p" "Personal" entry (file "~/auxRoam/refile.org")
         "* %u %?\n\n" :clock-in nil)
      ("P" "Personal Citation" entry (file "~/auxRoam/bibliography.org")
         "* %u %?\n\n#+begin_src latex\n%?\n#+end_src" :clock-in nil)
))
#+end_src

Use with beorg:

#+begin_quote
I use Beorg on mobile to capture stuff on my phone. And for funsies I set up my dumb Alexa speaker, and also Siri, to take TODOs and notes and save them to a "RobotTODOS.txt" file in Dropbox.
#+end_quote

** ~org-ref~
:PROPERTIES:
:CREATED:  [2023-02-24 Fri 01:01]
:END:
# - [2023-04-27 Thu 16:55]
# - Using org-glossary and org-cite


#+begin_example elisp
(use-package! org-ref
    :after org
    :commands
    (org-ref-cite-hydra/body
     org-ref-bibtex-hydra/body)
    :init
    ; code to run before loading org-ref
    :config
    (require 'org-ref)
    (add-hook 'org-export-before-parsing-hook 'org-ref-acronyms-before-parsing 'org-ref-glossary-before-parsing)
)
#+end_example

** ~org-glossary~
:PROPERTIES:
:CREATED:  [2023-04-27 Thu 23:36]
:END:
- [[https://github.com/tecosaur/org-glossary][GitHub - tecosaur/org-glossary: Glossary, Acronyms, and Index capability within Org]]


# #+begin_src emacs-lisp
(use-package! org-glossary
  :hook (org-mode . org-glossary-mode))
# #+end_src

** ~org-cite~
:PROPERTIES:
:CREATED:  [2023-05-03 Wed 12:35]
:END:

- As in [cite:@ref_20230503125135]


I want to use either:

#+begin_example emacs-lisp
(setq org-cite-global-bibliography (concat org-directory "bibliography.bib"))
#+end_example

#+RESULTS:
: ~/FilenSync/org/bibliography.bib

or

#+begin_example emacs-lisp
(setq org-cite-global-bibliography (concat (file-name-as-directory org-directory) "bibliography.bib"))
#+end_example

#+RESULTS:
: ~/FilenSync/org/bibliography.bib

but the one that works is
#+begin_example elisp
(setq org-cite-global-bibliography '("~/FilenSync/org/bibliography.bib"))
#+end_example

#+RESULTS:
: (~/FilenSync/org/bibliography.bib)

Notice that the one that works outputs
: ("~/FilenSync/org/bibliography.bib")
where as the others output
: "~/FilenSync/org/bibliography.bib"

** underscore and hat handling
:PROPERTIES:
:CREATED:  [2023-06-23 Fri 16:52]
:END:

#+begin_src elisp
(setq org-export-with-sub-superscripts nil)
#+end_src

- [[https://www.gnu.org/software/emacs/manual/html_node/org/Subscripts-and-Superscripts.html][Subscripts and Superscripts (The Org Manual)]]

** ~org-tag-alist~
:PROPERTIES:
:CREATED:  [2024-01-26 Fri 12:43]
:END:

#+begin_src elisp
(setq org-tag-alist '(
                      ("noexport" . ?n)
                      ("PROJ" . ?p)
                      ("read_only" . ?R)
                      )
)
#+end_src

** =CREATED= property
:PROPERTIES:
:CREATED:  [2024-04-10 Wed 12:12]
:END:

- [[https://emacs.stackexchange.com/questions/21291/add-created-timestamp-to-logbook][org mode - Add "created" timestamp to LOGBOOK - Emacs Stack Exchange]]


#+begin_src elisp
(defvar org-created-property-name "CREATED"
  "The name of the org-mode property that stores the creation date of the entry")

(defun org-set-created-property (&optional active NAME)
  "Set a property on the entry giving the creation time.

By default the property is called CREATED. If given the `NAME'
argument will be used instead. If the property already exists, it
will not be modified."
  (interactive)
  (let* ((created (or NAME org-created-property-name))
         (fmt (if active "<%s>" "[%s]"))
         (now  (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
    (unless (org-entry-get (point) created nil)
      (org-set-property created now))))
(add-hook 'org-capture-before-finalize-hook #'org-set-created-property)
#+end_src

** ~org-priority-[highest|default|lowest]~
:PROPERTIES:
:CREATED:  [2024-09-03 Tue 17:23]
:END:

Priority can't be more than one character; i.e.: ~10~
is two characters long where as ~9~ is one only.
Therefore, lowest is ~9~ instead of ~10~. If you want a
larger range you can use it with alphabetical
characters but that would be even more confusing for me
at least.

#+begin_src elisp
(setq org-enable-priority-commands t
    org-priority-highest 1
    org-priority-default 9
    org-priority-lowest 9)
#+end_src

** ~my/org-archive-done-tasks~
:PROPERTIES:
:CREATED:  [2024-09-21 Sat 16:06]
:END:

#+begin_src elisp
(defun my/org-get-parent-heading ()
  "Return the name of the parent heading of the current task."
  (save-excursion
    (outline-up-heading 1 t)  ;; Move to the parent heading
    (org-get-heading t t t t)))  ;; Get the parent heading name without tags or properties

(defun my/org-dynamic-archive-location ()
  "Dynamically generate the archive location based on the parent heading and current year.
The heading is sanitized to remove brackets, tags, and other non-alphabetic characters."
  (let* ((year (format-time-string "%Y"))  ;; Get the current year
         (parent-heading (my/org-get-parent-heading))  ;; Get the parent heading
         ;; Remove bracketed content (like [1/2][50%]) and tags (like :personal:)
         (clean-heading (replace-regexp-in-string "\\[.*?\\]\\|:[^:]*:" "" parent-heading))
         ;; Sanitize the heading: strip extra spaces and convert to lowercase with underscores
         (sanitized-heading (replace-regexp-in-string " +" "_" (downcase (string-trim clean-heading))))
         ;; Construct the archive file path
         (archive-file (concat "calendar/" year "/" sanitized-heading "_gtd_archive.org")))
    archive-file))  ;; Return the archive file path

(defun my/org-archive-done-tasks ()
  "Archive DONE tasks using a dynamically generated archive location based on the parent heading and year.
The default archive behavior is restored after the custom archiving."
  (interactive)
  (let ((org-archive-location (concat (my/org-dynamic-archive-location) "::")))  ;; Temporarily set archive location
    (org-archive-subtree)))  ;; Archive the current subtree
#+end_src

** ~my/org-agenda-custom-search-next-action~ and ~my/org-convert-to-next-action~
:PROPERTIES:
:CREATED:  [2024-09-23 Mon 13:16]
:END:

*** helper function

#+begin_src elisp
(defun create-prompt-from-list (prompt lst)
  "Helper function for numbered options with dots for alignment."
  (let ((max-length (apply 'max (mapcar 'length lst)))  ;; Get the max length of the items
        (choices ""))
    (cl-loop for x in lst
             for idx from 1
             do (let ((dots (make-string (- (+ max-length 5) (length x)) ?.)))  ;; Create the dots
                  (setq choices (concat choices (format "%s %s (%d)\n" x dots idx)))))
    (let ((choice (read-string (concat prompt "\n" choices "\nPress Enter to skip: "))))
      (if (and (string-match "^[0-9]+$" choice)  ;; Only accept numeric input
               (<= (string-to-number choice) (length lst)))
          (nth (1- (string-to-number choice)) lst)  ;; Return the selected tag
        nil))))  ;; Return nil if input is empty or invalid
#+end_src

*** ~my/org-agenda-custom-search-next-action~

#+begin_src elisp
;; Helper function to convert effort to HH:MM format
(defun effort-to-hhmm (effort-string)
  "Convert an EFFORT string in MINUTES or HOUR:MINUTE format to 'HH:MM'."
  (if (string-match-p ":" effort-string)
      ;; If format is HOUR:MINUTE (contains ":")
      effort-string
    ;; If format is just MINUTE, convert to HOUR:MINUTE
    (let* ((minutes (string-to-number effort-string))
           (hours (/ minutes 60))
           (mins (% minutes 60)))
      (format "%d:%02d" hours mins))))

;; Main function
(defun my/org-agenda-custom-search-next-action ()
  "Search Org mode agenda for entries with TODO='NEXT', CONTEXT, PLACE, ENERGY, EFFORT range, and optionally filter by PROJ ancestors.
If any argument is empty, the filter is ignored."
  (interactive)
  (let* (
         ;; CONTEXT filter selection (using `my-custom-tags-personal` from personal.el)
         (context-choice
          (create-prompt-from-list "Context (optional):" my-custom-tags-personal))

         ;; PLACE filter selection (using `my-custom-tags-place` from personal.el)
         (place-choice
          (create-prompt-from-list "Place (optional):" my-custom-tags-place))

         ;; ENERGY filter selection (using `my-custom-tags-energy` from personal.el)
         (energy-choice
          (create-prompt-from-list "Energy (optional):" my-custom-tags-energy))

         ;; Minimum EFFORT
         (min-effort (read-string "Minimum EFFORT (HOUR:MINUTE or MINUTE, leave empty to ignore): " nil nil ""))

         ;; Maximum EFFORT
         (max-effort (read-string "Maximum EFFORT (HOUR:MINUTE or MINUTE, leave empty to ignore): " nil nil ""))

         ;; PROJ filter selection (y/n or skip)
         (proj-only
          (let ((choice (read-string "Show only tasks with PROJ ancestors (y) or only without PROJ ancestors (n)? (Press Enter to skip): ")))
            (cond
             ((string= choice "y") t)   ;; If 'y', return true for project-related tasks
             ((string= choice "n") nil) ;; If 'n', return false for non-project tasks
             (t 'skip)))))  ;; If Enter is pressed, skip the PROJ filter entirely

    ;; Build the query, starting with TODO="NEXT"
    (let (query)
      (setq query "TODO=\"NEXT\"")

      ;; Add CONTEXT filter
      (when context-choice
        (setq query (concat query (format "+%s" context-choice))))

      ;; Add PLACE filter
      (when place-choice
        (setq query (concat query (format "+%s" place-choice))))

      ;; Add ENERGY filter
      (when energy-choice
        (setq query (concat query (format "+%s" energy-choice))))

      ;; Add Minimum EFFORT filter
      (when (and min-effort (not (string= min-effort "")))
        (setq query (concat query (format "+EFFORT>=\"%s\"" (effort-to-hhmm min-effort)))))

      ;; Add Maximum EFFORT filter
      (when (and max-effort (not (string= max-effort "")))
        (setq query (concat query (format "+EFFORT<=\"%s\"" (effort-to-hhmm max-effort)))))

      ;; Handle PROJ filtering (t, nil, or skip)
      (cond
       ((eq proj-only t)
        (setq query (concat query "+PROJ")))  ;; Show only project tasks
       ((eq proj-only nil)
        (setq query (concat query "-PROJ")))) ;; Exclude project tasks

      ;; Perform the search with the constructed query
      (org-tags-view nil query))))
#+end_src

*** ~my/org-convert-to-next-action~

#+begin_src elisp
(defun my/org-convert-to-next-action ()
  "Convert a TODO heading to a NEXT action, adding CONTEXT, PLACE, and ENERGY properties.
Calls `org-set-effort' to assign EFFORT interactively afterward.
Works if the point is anywhere within the subtree of the heading."
  (interactive)
  (save-excursion
    ;; Move point to the nearest heading, regardless of where it is in the subtree
    (org-back-to-heading t)

    (let* (
           ;; CONTEXT prompt with dots
           (context-choice
            (create-prompt-from-list "Context (optional):" my-custom-tags-personal))

           ;; PLACE prompt with dots
           (place-choice
            (create-prompt-from-list "Place (optional):" my-custom-tags-place))

           ;; ENERGY prompt with dots
           (energy-choice
            (create-prompt-from-list "Energy (optional):" my-custom-tags-energy)))

      ;; Replace the TODO keyword with NEXT
      (org-todo "NEXT")

      ;; Build the tags string from the choices and add it to the heading
      (let ((tags (concat (or context-choice "")
                          (if (and context-choice place-choice) ":" "")
                          (or place-choice "")
                          (if (and (or context-choice place-choice) energy-choice) ":" "")
                          (or energy-choice ""))))
        (org-set-tags-to tags))

      ;; Call org-set-effort for the interactive effort input
      (org-set-effort nil))))
#+end_src

** load tags file
:PROPERTIES:
:CREATED:  [2024-09-23 Mon 12:05]
:END:

#+begin_src emacs-lisp
;; Load personal settings from ~/.doom.d/personal.el, if it exists
(when (file-exists-p "~/.doom.d/personal.el")
  (load "~/.doom.d/personal.el"))

#+end_src

** CNLD log
:LOGBOOK:
- State "CNLD"       from              [2024-09-25 Wed 18:18]
:END:

Throws error. Disabling since not essential.
##+begin_src elisp
(defun org-summary-todo (n-done n-not-done)
"Switch entry to DONE when all subentries are done, to TODO otherwise."
(let (org-log-done org-log-states)   ; turn off logging
(org-todo (if (= n-not-done 0) "DONE" "TODO")))
)
##+end_src

** CNLD org fontify quote and verse blocks [DISABLED]
:PROPERTIES:
:ID:       5a04cbc3-238b-4f1c-8ec9-40b93404f25d
:END:
:LOGBOOK:
- State "CNLD"       from              [2024-09-25 Wed 18:17]
:END:
- https://emacs.stackexchange.com/questions/63344/italics-not-shown-in-block-quotes-in-orgmode

Original idea:
#+begin_quote
So that way when exporting =quote= blocks, they are fontified by default.
Since the variable ~org-fontify-quote-and-verse-block~ is set to ~nil~ by
default at time of writing ([2021-06-22 Tue]).
#+end_quote

#+begin_example
#+begin_src elisp
(setq org-fontify-quote-and-verse-blocks t)
#+end_src
#+end_example

*Commented out*: fontification only takes place inside the =orgmode= buffer,
but the exported part --- at least to =html= --- is still not executed; you
still have to put a =/= around the words you want to be /italiced/ when
exporting.

** CNLD disable heading numbering during export
:PROPERTIES:
:CREATED:  [2023-07-08 Sat 23:58]
:END:
:LOGBOOK:
- State "CNLD"       from              [2024-09-25 Wed 18:15] \\
  Not using it.
:END:
- [[https://stackoverflow.com/questions/9092445/how-do-you-remove-numbering-from-headers-when-exporting-from-org-mode][emacs - How do you remove numbering from headers when exporting from org-mode? - Stack Overflow]]


: #+begin_src elisp
: (setq org-export-with-section-numbers nil)
: #+end_src

** CNLD prevent invisible edits [Commented out]
:PROPERTIES:
:ID:       b2c447ca-344c-451a-b3a4-cbb168ecb91e
:END:
:LOGBOOK:
- State "CNLD"       from              [2024-09-25 Wed 18:16]
:END:
- https://emacs.stackexchange.com/questions/2086/org-mode-prevent-editing-of-text-within-collapsed-subtree



#+begin_quote
Documentation
Check if in invisible region before inserting or deleting a character.

Valid values are:

nil              Do not check, so just do invisible edits.
error            Throw an error and do nothing.
show             Make point visible, and do the requested edit.
show-and-error   Make point visible, then throw an error and abort the edit.
smart            Make point visible, and do insertion/deletion if it is
adjacent to visible text and the change feels predictable.
Never delete a previously invisible character or add in the
middle or right after an invisible region.  Basically, this
allows insertion and backward-delete right before ellipses.
FIXME: maybe in this case we should not even show?

This variable was added, or its default value changed, in Emacs 24.1.
#+end_quote

~#+begin_src elisp
(setq-default org-catch-invisible-edits 'error)
~#+end_src

I did not understand the =smart= option. Simply fail
and let me know so I'm more careful. It's not something
that I do a lot so low signal-to-noise ratio.

Commented out since it does not fail and does not let
me know that I did a mistake. I'll simply have to be
more careful.

* end org section
:PROPERTIES:
:ID:       889fe81d-8200-4e4f-b833-a2c20cc295eb
:END:
#+begin_src elisp
)
;; END AFTER ORG
#+end_src

* flyspell-mode t
:PROPERTIES:
:ID:       12e43ea2-162e-4a48-8115-da3fb00a32c1
:END:

# #+begin_src elisp
# (add-hook 'text-mode-hook 'flyspell-mode)
# (add-hook 'prog-mode-hook 'flyspell-prog-mode)
# #+end_src

* ispell config
:PROPERTIES:
:ID:       71aa1a7e-7cf6-4eb3-8fe5-e3d824003528
:END:

# #+begin_src elisp
# (setq ispell-dictionary "en")
# #+end_src

- Seems unnecessary.

* personal keybindings
  :PROPERTIES:
  :ID:       0cc3c478-ed08-4e4a-b993-a2ff205b829d
  :END:
#+begin_src elisp
(define-key evil-motion-state-map (kbd "C-z") nil) ; disable C-z as 'pause'
(global-set-key (kbd "\C-cr") 'ispell-region)
#+end_src

* start week on monday
  :PROPERTIES:
  :ID:       c1d944f2-b415-42b6-8e75-73a33185d38c
  :END:
- [2021-06-08 Tue 19:46]
#+begin_src elisp
(setq calendar-week-start-day 1)
#+end_src
- https://emacs.stackexchange.com/questions/42571/org-agenda-date-prompt-mini-calendar-start-week-on-monday

* dailies
:PROPERTIES:
:ID:       2078934a-a605-4347-a616-9359566f16f7
:END:
;; https://www.orgroam.com/manual.html#Daily_002dnotes
##+begin_src elisp
(setq org-roam-dailies-directory "~/org/dailies/")
(setq org-roam-dailies-capture-templates
'(("d" "default" entry
#'org-roam-capture--get-point
"* %?"
:file-name "daily/%<%Y-%m-%d>"
:head "#+title: %<%Y-%m-%d>\n\n"))
)
##+end_src

* treemacs
:PROPERTIES:
:ID:       c7dc78b9-6e98-4b63-8343-8ee68efce605
:END:

#+begin_src elisp
(setq +treemacs-git-mode 'simple)
#+end_src

* disable backup
:PROPERTIES:
:ID:       9a8a2efc-9871-4f88-9231-8017e44186e5
:END:
#+begin_src elisp
;; disable backup
(setq backup-inhibited t)
;; disable auto save
(setq auto-save-default nil)
#+end_src

* custom set faces
:PROPERTIES:
:ID:       5b57bd2a-7746-41c9-ab96-dd1a9d0147ef
:END:

#+begin_src elisp
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 2.5 :box (:line-width 10 :color "red")))
#+end_src

* custom set variables
:PROPERTIES:
:ID:       b9de5245-3299-4e27-8956-9c4668ee337b
:END:

#+begin_src elisp
;; (custom-set-variables
;;  '(safe-local-variable-values (quote ((ispell-dictionary . "español"))))
;;  )
#+end_src

* 60 char ruler :line:width:80char:terminal:ATTACH:
:PROPERTIES:
:ID:       afa21908-f444-43d4-a5fb-19b770cf13ec
:END:
- [2021-07-10 Sat 16:10]
- Since last =doom upgrade= a couple minutes ago, the ruler
  at 80 characters was gone. Also the =fill-column= module
  in =init.el=, specifically the =:ui= section was also gone.
- I got it back with this elisp but now also that ruler appears
  in the home view for Doom which is something new lol.
  Anyway, gets the job done but takes elegancy of Doom a
  little down. Still invaluable tool tho.
- https://stackoverflow.com/questions/578059/studies-on-optimal-code-width
- https://www.reddit.com/r/emacs/comments/kab809/for_those_who_dont_already_know_emacs_supports/
- https://www.reddit.com/r/emacs/comments/hezzwb/fillcolumnindicator_issue/
- https://www.reddit.com/r/emacs/comments/k895t5/displayfillcolumnindicatorcolumn_not_applying_on/


#+begin_src elisp
;; Load environment variables from the shell
;; (exec-path-from-shell-initialize)

;; Access the custom line length from the environment variable
(let ((line-length (string-to-number (or (getenv "CUSTOM_CLI_LINE_LENGTH") "55"))))
  ;;(setq display-fill-column-indicator t)
  (setq-default display-fill-column-indicator-column line-length)
  (setq-default fill-column line-length)
  (global-display-fill-column-indicator-mode))
#+end_src

- [2021-11-27 Sat 17:07] 65
- New update to '65' was actually not easy lol.
- [2021-11-27 Sat 22:52] 56
  - Because of the terminal zoom mechanism
  - Useful for two windows.
- [2021-11-28 Sun 15:19] 55
- See here
  - [[id:09354657-bb03-47ee-a5b2-ba91f2113050][Line width: 37 characters]]
- [2021-11-28 Sun 19:15]
  - [[id:668a9d2e-9ee9-47f7-a988-9fc3eac8b602][now 66]]
- [2021-11-28 Sun 19:32]
  - [[id:5ac9a42a-b152-4d31-ae69-9601c02cc0d1][now 70]]
- [2021-11-28 Sun 19:39]
  - [[id:4e935b6d-a359-4a08-9a86-7c07951ff3ef][now 60]]
- [2021-12-18 Sat 14:22]
  - now 56
  - Same as above.
- [2021-12-18 Sat 14:25]
  - 55
- [2024-04-04 Thu 18:14]
  - [[https://stackoverflow.com/questions/3566727/how-to-set-the-default-width-of-fill-mode-to-80-with-emacs][How to set the default width of fill mode to 80 with emacs? - Stack Overflow]]

* git gutter
:PROPERTIES:
:ID:       74f03acd-57b5-487d-af07-716129320bac
:END:
- [2021-11-30 Tue 20:28]
- https://github.com/hlissner/doom-emacs/issues/4369

#+begin_src elisp
(global-git-gutter-mode +1)
#+end_src

* ~org-ai~
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 22:37]
:END:


#+begin_src elisp :tangle no
(setq org-ai-openai-api-token "")

(use-package! org-ai
  :ensure t
  :defer t
  :commands (org-ai-mode
             org-ai-global-mode);;
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-default-chat-model "gpt-3.5-turbo") ; if you are on the free gpt-3.5-turbo:
  ;; (setq org-ai-default-chat-model "gpt-4") ; if you are on the gpt-4 beta:
  (org-ai-install-yasnippets)) ; if you are using yasnippet and want ai snippets
#+end_src

* fix =zo= not working in macOS
# - [2024-01-03 Wed 16:24]

#+begin_src elisp
(after! org (setq org-fold-core-style 'overlays) )
#+end_src

* orgmode readonly custom functions
:PROPERTIES:
:CREATED:  [2024-02-07 Wed 16:10]
:END:

#+begin_src elisp
(defun org-mark-readonly ()
  (interactive)
  (org-map-entries
   (lambda ()
     (let* ((element (org-element-at-point))
            (begin (org-element-property :begin element))
            (end (org-element-property :end element)))
       (add-text-properties begin (- end 1) '(read-only t))))
   "read_only")
)

(defun org-remove-readonly ()
  (interactive)
  (org-map-entries
   (lambda ()
     (let* ((element (org-element-at-point))
            (begin (org-element-property :begin element))
            (end (org-element-property :end element))
            (inhibit-read-only t))
         (remove-text-properties begin (- end 1) '(read-only t))))
     "read_only")
     (message "readonly disabled")
  )

(add-hook 'org-mode-hook 'org-mark-readonly)

#+end_src

* keyboard shortcuts
:PROPERTIES:
:CREATED:  [2023-09-07 Thu 16:31]
:END:
- [[https://www.dschapman.com/notes/bde6e938-0984-4d60-974d-77178f1ecd9b][How to Add Shortcuts to Doom Emacs]]
- [[https://rameezkhan.me/posts/2020/2020-07-03--adding-keybindings-to-doom-emacs/][Adding keybindings to Doom Emacs | rameezkhan.me]]


# - [2023-11-26 Sun 14:20]
- [[https://orgmode.org/manual/Column-Width-and-Alignment.html][Column Width and Alignment (The Org Manual)]]


#+begin_src elisp
(map! :leader
  (:prefix-map ("k" . "custom key bindings")

    (:prefix-map ("r" . "reload")
     :desc "Current dynamic block" "d" #'org-update-dblock
     :desc "All dynamic blocks" "D" #'org-update-all-dblocks
    )

    (:prefix-map ("a" . "align")
     :desc "align-regexp" "r" #'align-regexp
    )

    (:prefix-map ("c" . "code")
     :desc "org-edit-src-block" "c" #'org-edit-src-code
    )

    (:prefix-map ("o" . "orgmode")
      (:prefix-map ("p" . "Add property")
       :desc "CREATED" "c" #'org-set-created-property
      )

      (:prefix-map ("k" . "org-kanban")
       :desc "Insert kanban here" "i" #'org-kanban/initialize-here
       :desc "Configure kanban block at point" "c" #'org-kanban/configure-block
       :desc "Shift TODO state of current entry" "s" #'org-kanban/shift
      )

      (:prefix-map ("T" . "table")
         :desc "org-table-shrink" "s" #'org-table-shrink
         :desc "org-table-expand" "e" #'org-table-expand
         :desc "org-table-toggle-column-width" "t" #'org-table-toggle-column-width
      )

      (:prefix-map ("t" . "TODO")
         :desc "my/org-convert-to-next-action" "n" #'my/org-convert-to-next-action
      )

      (:prefix-map ("r" . "readonly")
         :desc "org-mark-readonly" "e" #'org-mark-readonly
         :desc "org-remove-readonly" "d" #'org-remove-readonly
      )
      :desc "my/org-archive-done-tasks" "A" #'my/org-archive-done-tasks
      (:prefix-map ("a" . "agenda")
         :desc "my/org-agenda-custom-search-next-action" "n" #'my/org-agenda-custom-search-next-action
      )
    )
  )
)
#+end_src

- [2023-11-24 Fri 17:09]
- [[https://github.com/doomemacs/doomemacs/blob/master/modules/lang/data/config.el][doomemacs/modules/lang/data/config.el at master · doomemacs/doomemacs · GitHub]]
- [[https://emacs.stackexchange.com/questions/71553/in-huge-csv-files-how-can-i-easily-find-out-in-which-csv-column-the-cursor-is][minor mode - In huge CSV files how can I easily find out in which CSV column the cursor is? - Emacs Stack Exchange]]


#+begin_src elisp
;;;###package csv-mode
(map! :after csv-mode
      :localleader
      :map csv-mode-map
      "a" #'csv-align-fields
      "u" #'csv-unalign-fields
      "s" #'csv-sort-fields
      "S" #'csv-sort-numeric-fields
      "k" #'csv-kill-fields
      "t" #'csv-transpose
      "h" #'csv-header-line
      )
#+end_src
